\h3{File management}

Once projects get larger,
it often becomes difficult to manage everything in a single file.
Also, tooling may benefit from having separate files.
For example, keeping separate SVG files
or CSS files may have better IDE support than writing these out directly inside of COWEL.

COWEL provides directives to load content from other files.

\h4[id=dir-include]{\dir{include} \c{mdash} Include text from a file}

The \dir{include} directive produces plaintext by loading the text contents of another file,
relative to the directory of the document.

It has no arguments, and its content is a plaintext context in which the path is specified.

\example{
Say we have a JavaScript file \tt{example.js} which we want to keep separate from the document.
We can then include it into a \dir{script} block to use it as a script,
or we can include it into a \dir{codeblock} to display its contents.
\codeblock[cowel]{\literally{
\codeblock[js]{
// code included from example.js:
\include{example.js}
}
}}
Assuming that \tt{example.js} is located in the same directory as the document
and that loading the file succeeds,
this renders as: 
\codeblock[js]{
// code included from example.js:
\include{example.js}
}
}

\note{
Directives and any other COWEL content within the file are not processed.
\dir{include} simply takes the text content of the file and generates plaintext from it.

However, when the directive is used in an HTML context
(like if we simply use \dir{include} in the middle of the document),
it is subject to escaping (\tt{&} \c{rightarrow} \ch{&amp;}, etc.) just like any other text.
In other words, you are also safe from HTML tags inside of included text breaking the document,
barring a few directives, like \dir{html} or \dir{script};
no such escaping takes place inside of \dir{script}.
}

\h4[id=dir-import]{\dir{import} \c{mdash} Import a sub-document}

The \dir{import} directive loads the content from another COWEL document,
substitutes the \dir{import} directive for those contents,
and processes them.

It has no arguments, and its content is a plaintext context in which the path is specified.

While \dir{import} and \dir{include} are similar,
there are some stark differences:
\ul{
\item{
\dir{import} is used for COWEL documents,
while \dir{include} is used for anything else.
}
\item{
\dir{import} doesn't just load the text from another file,
but parses it and ensures that the contents are a valid COWEL document.
}
\item{
\dir{include} is a plaintext directive, and interops nicely with syntax highlighting.
It is also possible to \dir{include} COWEL files into code blocks without
any regards as to their contents.
On the contrary, content expanded from \dir{import}
is subject to the same rules as the surrounding document.
}
}

\example{
Say we have another \tt{test.cow} files containing:
\codeblock[cowel]{\literally{
Hello, \strong{imports}!

Next paragraph.
}}
When using \dir{import},
the contents of the other file are substituted where we have written \dir{import},
which means that imported content also plays nicely with paragraph splitting:
\codeblock[cowel]{\literally{
First paragraph.
\import{test.cow}
}}
Generated HTML:
\codeblock[html]{
<p>First paragraph.
Hello, <strong>imports</strong>!</p>

<p>Next paragraph.</p>
}
}

\tip{
It is common practice to collect macros and other reusable components in separate documents,
and to \dir{import} them when needed.
This can help you avoid copying boilerplate between multiple documents.

It is also common to split documents into multiple files that are combined using a sequence
of \dir{import}s.
}
