\h3{Macros}

\h4[id=dir-def]{\cowdoc_dir{macro} \c{mdash} Define a macro}

The \cowdoc_dir{macro} directive defines a \dfn{macro},
which is basically a user-defined directive.
It has a single \tt{pattern} argument,
which shall be a single \dfn{pattern directive} which describes the defined directive.

\Bnote{
The arguments and content of the pattern directive are not processed,
but can be used to document how the directive is meant to be used.
\codeblock[cowel]{\literally{
\: The following two definitions are equivalent:
\macro[\m{...}]{xyz}
\macro[\m]{xyz}
}}
}

Within macros, uses of the \cowdoc_dir{put} pseudo-directive are replaced with the inputs to
the macro.
There are multiple forms of the \cowdoc_dir{put} which expand different parts of the macro input.

The content of a \cowdoc_dir{put} directive is a plaintext context,
and specifies which part of the provided content or arguments should be used.

\h4{\cowdoc_c{\\put{}} \c{mdash} Replaced with provided content}

A \cowdoc_dir{put} directive with no given content (or empty/blank content)
is replaced with the content provided to the macro upon use.

\Bex{
\codeblock[cowel]{\literally{
\macro[\bi]{\b{\i{\put}}}
\: Now, the following are equivalent:
\b{\i{bold and italic}}
\bi{bold and italic}
}}
}

\h4{\cowdoc_c{\\put{0}}, \cowdoc_c{\\put{1}}, \N{HORIZONTAL ELLIPSIS} \c{mdash} Replaced with argument}

When the content provided to \cowdoc_dir{put} is an integer,
the corresponding argument is selected,
where \tt{0} represents the first argument.

Additionally,
such a \cowdoc_dir{put} directive has an \cowdoc_attr{else} parameter,
which replaces the \cowdoc_dir{put} directive if not enough positional arguments were provided
to the macro.
If there is no \cowdoc_attr{else} argument,
this would result in an error instead.

\Bex{
\codeblock[cowel]{\literally{
\macro[\arg0]{\put[else = otherwise]{0}}
\arg0[abc]{xyz}
\arg0{xyz}
}}
After macro substitution, this markup is equivalent to:
\codeblock[cowel]{
abc
otherwise
}
Notice that \cowdoc_c{xyz} is ignored in either case
because there is no \cowdoc_c{\\put{}} that would make use of it.

The second macro invocation \cowdoc_c{\\arg0{xyz}} would result in an error if no
\cowdoc_attr{else} argument was provided.
}

\h4{\cowdoc_c{\\put{...}} \c{mdash} Forwarding provided arguments}

\cowdoc_c{\\put{...}} (where the given content is three periods)
expands to \em{all} provided macro arguments.
It shall only appear as a positional argument to a directive, with no surrounding content.
That is:
\ul{
    \li{\cowdoc_c{\\x[\\put{...}]} is OK,}
    \li{
        \cowdoc_c{\\x[a, \\put{...}, b]} is OK
        because spaces around \cowdoc_c{\\put{...}} are ignored and do not constitute text, but
    }
    \li{
        \cowdoc_c{\\x[a\\put{...}b]} is an error
        because \cowdoc_c{\\put{...}} is being mixed with other (text) content,
    }
    \li{
        \cowdoc_c{\\x[n=\\put{...}]} is an error
        because \cowdoc_c{\\put{...}} is used as a named argument, and
    }
    \li{
        \cowdoc_c{\\x{\\put{...}}} is an error
        because \cowdoc_c{\\put{...}} does not appear as a directive argument.
    }
}

\Bex{
\cowdoc_c{\\put{...}} is especially useful when creating "wrapper macros" for other directives:
\codeblock[cowel]{\literally{
\macro[\js_block]{\codeblock[lang=js,\put{...}]{\put}}

\: \js_block now acts as a shorthand for JavaScript blocks,
\: and thanks to forward with \put{...}, we can provide further arguments
\: to the underlying \codeblock directive.
\js_block[borders=no]{
function sqr(x) { return x * x; }
}
}}
After macro substitution, this markup is equivalent to:
\codeblock[cowel]{\literally{
\codeblock[lang=js,borders=no]{
function sqr(x) { return x * x; }
}
}}
}


\h4{Avoiding name collisions}

Since COWEL continuously adds more directives in the future,
you should try to avoid names that may collide with those when defining your own macros.
COWEL builtin directive names only use alphanumeric characters and '\tt{-}'.

\Btip{
The '\tt{_}' character can be used as part of directive names,
and COWEL will never use this in its own names.
Therefore, you should try to "namespace" your own macros like:
\codeblock[cowel]{\literally{
\macro[\abc_i]{macro definition here ...}
\abc_i
}}
}
