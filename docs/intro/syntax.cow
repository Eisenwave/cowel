\h2{Syntax in a nutshell}

COWEL has a minimalistic but powerful syntax,
built on top of only three syntactical constructs:
\ul{
  \li{\cowdoc_c{\\various-directives[positional args, named-args = 0]{and content}}}
  \li{\cowdoc_c{Text.}}
  \li{\cowdoc_c{\\:Comments}}
  \li{Escape sequences, such as \cowdoc_c{\\\U{7B}}, \cowdoc_c{\\\U{7D}}, \cowdoc_c{\\\\}, etc.}
}

There is no special syntax besides that,
meaning that as long as some bit of code doesn't contain a \cowdoc_c{\\},
it's all interpreted as plaintext.
This makes COWEL exceptionally suited to nest other languages inside of it in code blocks etc.

\h3{Text}

Text is not processed specially;
what you see is what you get.

However, the output may depend on the context (\ref[#contexts-and-output]).
For example, \cowdoc_c{<} in text will render as a < character,
but will be converted to \cowdoc_html{&lt;} in an HTML context.

\h3[id=syntax-comments]{Comments}

Comments begin with \cowdoc_c{\\:} and extend until the end of the line.
In almost every context,
comments are discarded instead of being emitted into the output HTML.

This makes them useful for adding information to the COWEL markup.

\Bnote{
Comments, just like any other content,
are actually part of the AST and don't simply get discarded during parsing.
This means that a comment wrapped in \ref[#dir-literally] will render as expected:
\codeblock[cowel]{\literally{
\codeblock[cowel]{\literally{
\: A comment ...
}}
}}
This renders as:
\codeblock[cowel]{\literally{
\: A comment ...
}}
}

Comments also "absorb" the trailing newline (LF or CRLF),
which means that a trailing comment won't add any lines (not even blank lines)
to the generated markup.

\Bex{
We can even join words by putting a comment between:
\codeblock[cowel]{\literally{
Hello\: this comment will absorb the newline
World

Hello \: this comment also does, but is preceded by a space
World
}}

Generated HTML:
\codeblock[html]{
HelloWorld

Hello World
}
}

\h3{Escape sequences}

COWEL supports multiple escape sequences,
all of which begin with a \cowdoc_c{\\} (like directives),
but are followed by some special character.
The meaning of the escape sequences is described in the table below.

\style{
  #escapes-table {
    margin-left:auto;
    margin-right:auto;
    table-layout: fixed;
  }
  #escapes-table td {
    border-top: 1px solid var(--border-color);
  }
  #escapes-table td:first-child {
    width: 40%;
  }
}

\table[id=escapes-table]{
  \tr{
    \th{Escape sequence}
    \th{Meaning}
  }
  \tr{
    \td{
      \cowdoc_esc{\N{LEFT CURLY BRACKET}},
      \cowdoc_esc{\N{RIGHT CURLY BRACKET}},
      \cowdoc_esc{\\},
      \cowdoc_esc{[},
      \cowdoc_esc{]},
      \cowdoc_esc{,},
      \cowdoc_esc{=},
      \nobr{\cowdoc_esc{} U+0009 HORIZONTAL TABULATION},
      \nobr{\cowdoc_esc{} U+0020 SPACE}
    }
    \td{
      Expands to the second character in the escape sequence.
      These sequences are stable.
    }
  }
  \tr{
    \td{
      \cowdoc_esc{!},
      \cowdoc_esc{"},
      \cowdoc_esc{#},
      \cowdoc_esc{\N{DOLLAR SIGN}},
      \cowdoc_esc{\N{PERCENT SIGN}},
      \cowdoc_esc{&},
      \cowdoc_esc{'},
      \cowdoc_esc{(},
      \cowdoc_esc{)},
      \cowdoc_esc{*},
      \cowdoc_esc{+},
      \cowdoc_esc{.},
      \cowdoc_esc{/},
      \cowdoc_esc{;},
      \cowdoc_esc{<},
      \cowdoc_esc{>},
      \cowdoc_esc{?},
      \cowdoc_esc{@},
      \cowdoc_esc{^},
      \cowdoc_esc{|},
      \cowdoc_esc{~}
    }
    \td{
      Expands to the second character in the escape sequence.
      \strong{These sequences are unstable},
      meaning that they could be given a different meaning in the future.
      \strong{Use with caution!}
    }
  }
  \tr{
    \td{
      \nobr{\cowdoc_esc{} U+000A LINE FEED},
      \nobr{\cowdoc_esc{} U+000B VERTICAL TABULATION},
      \nobr{\cowdoc_esc{} U+000D CARRIAGE RETURN},
      \nobr{\cowdoc_esc{} U+000A U+000D (CRLF escape)}
    }
    \td{
      Expands to nothing; feature is stable
    }
  }
}

If there is an ambiguity between a CRLF escape and a simple U+000D CARRIAGE RETURN escape,
this ambiguity is resolved in favor of a CRLF escape.

\Bnote{
The purpose of most escapes is to prevent a character from having special meaning.
For example, the \cowdoc_esc{,} escape prevents a comma from being interpreted
as a separator between directive arguments.

The purpose of the newline escapes is to remove unwanted newlines
and to join long content that spans multiple lines,
but without introducing any whitespace in the markup.
}

\h3{Whitespace}

COWEL translates very directly into HTML.
Any whitespace in text is preserved exactly as is.
The way that whitespace is processed then depends on the produced HTML and how it is CSS-styled.

\Bex{
At a top level, whitespace is merged and line breaks are rendered like spaces:
\codeblock[cowel]{
This displays on one line
because line breaks render like spaces.
}
Generated HTML:
\codeblock[html]{
<p>This displays on one line
because line breaks render like spaces.</p>
}
Rendered output:
\Bindent{This displays on one line because line breaks render like spaces.}
}

\h3{Paragraph splitting}

At the top-level in the document and within the content of certain directives,
\dfn{paragraph splitting} takes place.
All content in COWEL is either \dfn{inline content}, \dfn{block content}, or \dfn{meta content}.
Text and escape sequences are inline content,
and directives are sometimes inline and sometimes block content.
Certain directives (e.g. \cowdoc_dir{comment}) that don't generate anything rendered are meta content.

The process of paragraph splitting works as follows:
\ul{
  \li{
    Blank-line-separated blocks of inline content is wrapped in in \cowdoc_html{<p>...</p>} tags.
    Meta content is not counted as a blank line, so it "continues" inline content,
    but no effort is made to wrap it in \cowdoc_html{<p>...</p>}.
  }
  \li{
    Block content stays untouched, i.e. it is not wrapped in \cowdoc_html{<p>...</p>}.
    However, it also terminates prior inline content, like a blank line.
  }
}

\Bex{
COWEL markup:
\codeblock[cowel]{
First paragraph.

Second paragraph.
\\blockquote{This is a block directive.}
}
Generated HTML:
\codeblock[html]{
<p>First paragraph.</p>

<p>Second paragraph.</p>
<blockquote>This is a block directive.</blockquote>
}
}
