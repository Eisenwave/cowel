\h2{New directives}

Find below a list of builtin directives.
That is, directives that you can always use
because they are "built into the language".

\Bnote{
These builtin directives should rarely be used directly,
but through macro packages which utilize them.

Even if one wanted to use them,
builtin directive have long names which make them impractical for direct use in markup.
However, those long names are self-document, unambiguous,
and guaranteed not to collide with any user directives.
}

\h3[id=new-character-utilities]{Character utilities}

It is quite common that a text document should include special characters.
While COWEL is built on UTF-8 and in theory,
one could just write the character directly into the source code,
not every text editor handles special characters well,
not to mention that some characters are invisible when rendered.

For portability and convenience
COWEL has builtin directives for generating and querying characters.

\h4[
  id = dir-cowel_char_by_entity
]{\cowdoc_dir{cowel_char_by_entity} \c{mdash} Character by HTML character reference}

The \cowdoc_dir{cowel_char_by_entity} directive takes the name of a character
and outputs the respective code points as text.
The input to a \cowdoc_dir{c} directive is provided as content,
which consists of an HTML entity
without the leading '\tt{&}' and trailing '\tt{;}'.
All arguments are ignored.

\Bex{
The '\tt{&}' character can be produced in a number of ways:
\ul{
    \li{Literally '\tt{&}' in text}
    \li{\cowdoc_c{\\c{amp}} (like \cowdoc_html{&amp;}, named character reference)}
    \li{\cowdoc_c{\\c{#38}} (like \cowdoc_html{&38;}, decimal character reference)}
    \li{\cowdoc_c{\\c{#x26}} (like \cowdoc_html{&x26;}, hexadecimal character reference)}
}
}

\h4[
  id = dir-cowel_char_by_name
]{\cowdoc_dir{cowel_char_by_name} \c{mdash} Character by Unicode name}

The input to a \cowdoc_dir{cowel_char_by_num} directive is text content which should be a
\ref[https://www.unicode.org/reports/tr34/#Names]{Unicode name}
for a code point.
That is, the name of a code point,
or one of its "control", "alternate", or "correction" aliases.

\Bex{
\cowdoc_c{\\N{DIGIT ZERO}} generates '\tt{\N{DIGIT ZERO}}' U+0030 DIGIT ZERO.
}

\h4[
  id = dir-cowel_char_by_num
]{\cowdoc_dir{cowel_char_by_num} \c{mdash} Character by code point number}

The input to a \cowdoc_dir{cowel_char_by_num} directive is text content
which should be a sequence of hexadecimal numbers
specifying a \ref[https://infra.spec.whatwg.org/#scalar-value]{Unicode scalar value};
that is, a code point which UTF-8 permits to be encoded.
All arguments are ignored.

\Bex{
\cowdoc_c{\\U{30}} generates '\tt{\U{30}}' U+0030 DIGIT ZERO.
}

\Btip{
Use of \cowdoc_dir{cowel_char_by_name} can lead to much more descriptive,
human-friendly code, compared to \cowdoc_dir{cowel_char_by_num}.

The main issue with \cowdoc_dir{cowel_char_by_num} is
that it is very non-descriptive in source code.
It simply contains a handful of digits,
and unless the reader is a Unicode expert who happens to know that sequence,
they cannot easily tell what the purpose of the character is.
}

\h4[
  id=dir-cowel_char_get_num
]{\cowdoc_dir{cowel_char_get_num} \c{mdash} Get digits of character}

The \cowdoc_dir{cowel_char_get_num} directive is essentially the
inverse of the \cowdoc_dir{cowel_char_by_num} directive.
Its input is also plaintext content.
Rather than producing a code point from a digit sequence,
it produces a digit sequence from its input code point.

This can be fine-tuned with the following parameters:
\dd{
  \dt{\cowdoc_attr{zfill}}
  \dd{
    The minimum amount of digits that should be produced.
    This is an integer argument in range [0, 1024], and defaults to zero.
    If the amount of digits is less than \cowdoc_attr{zfill},
    it will be left-padded with additional '\tt{0}' characters.
  }

  \dt{\cowdoc_attr{base}}
  \dd{
    The base of the output digit sequence, in range [2, 16].
    This defaults to 16, meaning that the digits are printed in hexadecimal.
  }

  \dt{\cowdoc_attr{lower}}
  \dd{
    A yes/no plaintext argument, defaulting to \tt{no}.
    If \tt{yes} is specified, digits beyond '\tt{9}' (i.e. '\tt{A}' to '\tt{F}')
    will be output in lower case instead.
}
}

\Bex{
COWEL markup:
\codeblock[cowel]{\literally{
U+\cowel_char_get_num[4]{x}
}}
This renders as:
\Bindent{
U+\cowel_char_get_num[4]{x}
}
Note that U+0078 is the usual way in which Unicode code points are represented.
That is, \tt{U+}, followed by at least four hexadecimal digits.
It is also possible to define a macro if we need this frequently:
\codeblock[cowel]{\literally{
\macro[\code_point]{U+\cowel_char_get_num{\put}}
\code_point{x}
}}
}

\Btip{
\cowdoc_dir{cowel_char_get_num} can also be combined with \cowdoc_dir{cowel_char_by_name}
to produce human-readable descriptions of code points,
while also keeping our source code readable:
\codeblock[cowel]{\literally{
\macro[\named_char{...}]{U+\cowel_char_get_num[4]{\N{\put}} \put}
\named_char{SECTION SIGN}
}}
This renders as:
\Bindent{
U+\cowel_char_get_num[4]{\N{SECTION SIGN}} SECTION SIGN
}
}

\cowdoc_dir{cowel_char_get_num} uses only the first code point within the input text,
even though the entire input text is processed into plaintext.

\Bug{
If we provide more than a single code point, some input is discarded:
\codeblock[cowel]{
\\cowel_char_get_num{abc}
}
This renders as
\Bindent{
\cowel_char_get_num{a}
}
... which corresponds to \cowdoc_c{a}, whereas \cowdoc_c{b} and \cowdoc_c{c} are discarded.
}

\h3{HTML utilities}

\h4[
  id=dir-cowel_html_element
]{\cowdoc_dir{cowel_html_element} \c{mdash} HTML element}

The \cowdoc_dir{cowel_html_element} directive generates content,
surrounded in HTML opening and closing HTML tags.
That is, it

\ul{
  \li{
    writes an opening tag,
    where any named arguments are converted to HTML attributes,
  }
  \li{
    feeds the provided content into the current content policy, and then
  }
  \li{
    writes a closing tag.
  }
}

The name of the HTML tag is provided
as the first positional argument to the directive.

\Bex{
COWEL markup:
\codeblock[cowel]{\literally{
This is \cowel_html_element[span, id=abc]{a span}.
}}
Generated HTML:
\codeblock[html]{
This is <span id=abc>a span</span>.
}
}

A \cowdoc_dir{cowel_html_element} directive produces an error if the given
tag name is not a valid HTML tag name, or
if any of the argument names are invalid.

\h4[
  id=dir-cowel_html_self_closing_element
]{\cowdoc_dir{cowel_html_self_closing_element} \c{mdash} Self-closing HTML element}

The \cowdoc_dir{cowel_html_self_closing_element} directive generates a self-closing HTML element.
That is, an element with no content,
and where there is no closing tag.
Content is ignored.

The name of the tag is provided as the first positional argument,
and any named arguments are converted to attributes of the tag.

\Bex{
COWEL markup:
\codeblock[cowel]{\literally{
Horizontal rule:
\cowel_html_self_closing_element[hr, id=abc]{ignored}
}}
Generated HTML:
\codeblock[html]{
Horizontal rule:
<hr id=abc />
}
}

\h3[id=new-paragraph-control]{Paragraph control}

Dividing content into paragraphs manually would take a huge amount of effort,
so COWEL provides means of doing so semi-automatically.
Text within in a paragraphs policy (\ref[#contexts-and-output])
is automatically wrapped in paragraphs (\cowdoc_html{<p>...</p>}),
divided at blank lines.

While content expanded from macros and from \cowdoc_dir{cowel_include}
is fed into the surrounding content policy
(which may be a paragraphs policy) directly,
directives are generally treated as "black boxes"
for the purpose of paragraph splitting,
and they neither begin nor end a paragraph.
The following paragraph control directives define interactions
between paragraph splitting and directives.

\h4[
  id = dir-cowel_paragraphs
]{\cowdoc_dir{cowel_paragraphs} \c{mdash} Perform paragraph splitting}

The \cowdoc_dir{cowel_paragraphs} directive
creates a paragraphs policy (\ref[#contexts-and-output])
and feeds all provided content into that policy.
The beginning and end of the provided content are considered to be outside a paragraph.
All arguments are ignored.

\Bex{
COWEL markup:
\codeblock[cowel]{\literally{
\cowel_paragraphs{
First paragraph.

Second paragraph.
}
}}

Generated HTML:
\codeblock[html]{
<p>First paragraph.</p>

<p>Second paragraph.</p>
}
}

\Bnote{
At a top-level within the document,
paragraph splitting takes place implicitly,
as if the whole document was wrapped in \cowdoc_dir{cowel_paragraphs}.

However, this does not extend recursively,
so if one wants to have paragraph splitting inside say,
\cowdoc_dir{cowel_html_\c{shy}element},
\cowdoc_dir{cowel_paragraphs} has to be used.
}

\h4[
  id = dir-cowel_paragraph_enter
]{\cowdoc_dir{cowel_paragraph_enter} \c{mdash} Enter a paragraph}

If the current content policy is a paragraphs policy and
and the paragraph state is "outside",
the paragraph state becomes "inside",
and a \cowdoc_html{<p>} tag is emitted.
Otherwise, has no effect.
All arguments are ignored.

\Bex{
COWEL markup, assuming a surrounding paragraphs policy:
\codeblock[cowel]{\literally{
\cowel_char_by_name{DIGIT ONE}. First paragraph

\cowel_paragraph_enter\cowel_char_by_name{DIGIT TWO}. Second paragraph
}}

Generated HTML:
\codeblock[html]{
1<p>. First paragraph</p>

<p>2. Second paragraph</p>
}

As explained, directives are "black boxes" for paragraph splitting,
so when the paragraphs policy processes \cowdoc_dir{cowel_char_by_name},
it does not automatically begin a paragraph.
}

\Btip{
\cowdoc_dir{cowel_paragraph_enter} should rarely be used directly,
but from within macros.

For example, the user can define an \cowdoc_dir{N} directive which combines
\cowdoc_dir{cowel_para\c{shy}graph_enter} and \cowdoc_dir{cowel_\c{shy}char_by_name}.
}

\h4[
  id = dir-cowel_paragraph_leave
]{\cowdoc_dir{cowel_paragraph_leave} \c{mdash} Leave a paragraph}

If the current content policy is a paragraphs policy and
and the paragraph state is "inside",
the paragraph state becomes "outside",
and a closing \cowdoc_html{</p>} tag is emitted.
Otherwise, has no effect.
All arguments are ignored.

\Bex{
COWEL markup, assuming a surrounding paragraphs policy:
\codeblock[cowel]{\literally{
Paragraph 1:
\cowel_html_self_closing_element[hr]

Paragraph 2:
\cowel_paragraph_leave\cowel_html_self_closing_element[hr]
}}

Generated HTML:
\codeblock[html]{
<p>Paragraph 1:
<hr/></p>

<p>Paragraph 2:
</p><hr/>
}

As explained, directives are "black boxes" for paragraph splitting,
so when the paragraphs policy processes \cowdoc_dir{cowel_html_self_closing_element},
it does not automatically leave a paragraph.
This would be necessary because horizontal rules (\cowdoc_html{<hr/>})
are not supposed to be inside a paragraph.
}

\Btip{
\cowdoc_dir{cowel_paragraph_leave} should rarely be used directly,
but from within macros.

For example, the user can define a \cowdoc_dir{hr} directive which combines
\cowdoc_dir{cowel_para\c{shy}graph_leave} and
\cowdoc_dir{cowel_\c{shy}html_self_closing_element}.
}

\h4[
  id = dir-cowel_paragraph_inherit
]{\cowdoc_dir{cowel_paragraph_inherit} \c{mdash} Activate paragraph splitting inside a directive}

\Bimp{
There is no support for programmatic directives yet,
so this directive is currently useless.
There are plans to add a WASM scripting API from which
\cowdoc_dir{cowel_paragraph_inherit} may be used to alter behavior.
}

As already stated,
paragraph splitting generally treats directives as "black boxes".
However, content expanded from \cowdoc_dir{cowel_include} and macros
\dfn{inherits} the surrounding paragraph for splitting,
i.e. any content produced by such directives is fed directly into the paragraphs policy.
\cowdoc_dir{cowel_paragraph_inherit} can be used inside programmatic directives
defined by the user to achieve the same behavior.

\h3[id=new-file-management]{File management}

Once projects get larger,
it often becomes difficult to manage everything in a single file.
Also, tooling may benefit from having separate files.
For example, keeping separate SVG files
or CSS files may have better IDE support than writing these out directly inside of COWEL.

COWEL provides directives to load content from other files.

\h4[
  id = dir-cowel_include
]{\cowdoc_dir{cowel_include} \c{mdash} Include a sub-document}

The \cowdoc_dir{cowel_include} directive loads the content from another COWEL document,
and processes it using the current content policy.
The path to the document is provided as content to \cowdoc_dir{cowel_include},
and is assumed to be relative to the current file.
All arguments are ignored.

If the current content policy is a paragraphs policy (\ref[#contexts-and-output]),
paragraph splitting of the included sub-document takes place
as if its contents were expanded directly where \cowdoc_dir{cowel_include} appears.
In other words, \cowdoc_dir{cowel_include} inherits the paragraph context,
or is \em{not} a "black box" to paragraph splitting.

\Bex{
Say we have another \tt{test.cow} files containing:
\codeblock[cowel]{\literally{
Hello, includes!

Next paragraph.
}}
When using \cowdoc_dir{cowel_include},
the contents of the other file are substituted where we have written \cowdoc_dir{cowel_include},
which means that imported content also plays nicely with paragraph splitting:
\codeblock[cowel]{\literally{
First paragraph.
\cowel_include{test.cow}
}}
Generated HTML:
\codeblock[html]{
<p>First paragraph.
Hello, includes!</p>

<p>Next paragraph.</p>
}
}

\Btip{
It is common practice to collect macros and other reusable components in separate documents,
and to \cowdoc_dir{cowel_include} them when needed.
This can help you avoid copying boilerplate between multiple documents.

It is also common to split documents into multiple files that are combined using a sequence
of \cowdoc_dir{cowel_include}s.
}

\h4[
  id = dir-cowel_include_text
]{\cowdoc_dir{cowel_include_text} \c{mdash} Include text from a file}

The \cowdoc_dir{cowel_include_text} directive reads the UTF-8 text contents of another file
and feeds that text into the current content policy.
The path to the document is provided as content to \cowdoc_dir{cowel_include_text},
and is assumed to be relative to the current file.
All arguments are ignored.

\Bex{
Say we have a JavaScript file \tt{example.js} which we want to keep separate from the document.
We can then include it into a \cowdoc_dir{script} block to use it as a script,
or we can include it into a \cowdoc_dir{codeblock} to display its contents.
\codeblock[cowel]{\literally{
\codeblock[js]{
// code included from example.js:
\cowel_include_text{example.js}
}
}}
Assuming that \tt{example.js} is located in the same directory as the document
and that loading the file succeeds,
this renders as: 
\codeblock[js]{
// code included from example.js:
\cowel_include_text{example.js}
}
}

\Bnote{
While \cowdoc_dir{cowel_include} and \cowdoc_dir{cowel_include_text} are similar,
there are some stark differences:
\ul{
  \li{
    \cowdoc_dir{cowel_include} is used for COWEL documents,
    while \cowdoc_dir{cowel_include_text} is used for anything else.
  }
  \li{
    \cowdoc_dir{cowel_include} doesn't just load the text from another file,
    but parses it and ensures that the contents are a valid COWEL document.
  }
  \li{
    \cowdoc_dir{cowel_include} feeds content from another document
    piece by pice into the current content policy.
    \cowdoc_dir{cowel_include_text} reads text
    and feeds it all in a single block to the content policy.
  }
}
}
