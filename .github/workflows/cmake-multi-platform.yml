name: CMake on multiple platforms

on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]

jobs:
  build:
    timeout-minutes: 15
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest]
        build_type: [Debug]
        toolchain: [gcc, clang-libstdc++, clang-libc++]
        include:
          - toolchain: gcc
            compiler: gcc
            c_compiler: gcc-13
            cpp_compiler: g++-13
            stdlib: libstdc++
            stdlib_package: libstdc++-13-dev
          - toolchain: clang-libstdc++
            compiler: clang
            c_compiler: clang-19
            cpp_compiler: clang++-19
            stdlib: libstdc++
            stdlib_package: libstdc++-13-dev
          - toolchain: clang-libc++
            compiler: clang
            c_compiler: clang-19
            cpp_compiler: clang++-19
            stdlib: libc++
            stdlib_package: libc++-19-dev

    steps:
    - uses: actions/checkout@v4
      with:
        submodules: true

    - name: Dump info
      run: |
        printf "Workspace:   ${{ github.workspace }}\n"
        printf "Running on:  ${{ runner.os }}\n"
        printf "Compilers:   ${{ matrix.compiler }} / ${{ matrix.c_compiler }} / ${{ matrix.cpp_compiler }}\n"
        printf "Library:     ${{ matrix.stdlib }} / ${{ matrix.stdlib_package }}"

    - name: Install dependencies (Ubuntu)
      if: runner.os == 'Linux'
      run: |
        sudo apt update
        sudo apt install -y ${{ matrix.c_compiler }} ${{ matrix.stdlib_package }} libgtest-dev

    - name: Set reusable strings
      id: strings
      shell: bash
      run: |
        echo "build-output-dir=${{ github.workspace }}/build" >> "$GITHUB_OUTPUT"
        echo "workspace_forward=$(echo '${{ github.workspace }}' | sed 's|\\|/|g')" >> "$GITHUB_OUTPUT"

    - name: Configure CMake (Linux/macOS)
      if: runner.os != 'Windows'
      run: |
        COMPILER_FLAGS=""
        LINKER_FLAGS=""
        if [[ "${{ matrix.compiler }}" == "clang" && "${{ matrix.stdlib }}" == "libc++" ]]; then
          COMPILER_FLAGS="-stdlib=libc++"
          LINKER_FLAGS="-stdlib=libc++ -lc++ -lc++abi"
        fi

        cmake -B ${{ steps.strings.outputs.build-output-dir }} \
        -DCMAKE_COMPILE_WARNING_AS_ERROR=ON \
        -DCMAKE_COLOR_DIAGNOSTICS=ON \
        -DCMAKE_CXX_FLAGS="-fdiagnostics-color=always $COMPILER_FLAGS" \
        -DCMAKE_CXX_LINK_FLAGS="$LINKER_FLAGS" \
        -DCMAKE_CXX_COMPILER=${{ matrix.cpp_compiler }} \
        -DCMAKE_C_COMPILER=${{ matrix.c_compiler }} \
        -DCMAKE_BUILD_TYPE=${{ matrix.build_type }} \
        -S ${{ github.workspace }}

    - name: Build
      run: >
        cmake --build ${{ steps.strings.outputs.build-output-dir }}
        --config ${{ matrix.build_type }}
        --verbose

    - name: Test
      working-directory: ${{ steps.strings.outputs.build-output-dir }}
      run: ctest --output-on-failure --build-config ${{ matrix.build_type }}
      timeout-minutes: 5
